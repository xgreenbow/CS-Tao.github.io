[{"title":"GMap.net for WPF ʹ���ĵ�","url":"/2017/08/19/GMap-net-for-WPF-使用心得/","content":"** GMap.net for WPF ** <Excerpt in index | ��ҳժҪ>\n    ����GMap.net for WPF���Ƶ������ķ�ʽ�Լ���Ҫ��֮�����Զ�λ�ķ�ʽ\n<!-- more -->\n<The rest of contents | ����ȫ��>\n\n## GMap.net����\n[GMap.net](https://greatmaps.codeplex.com/ \"����GMap.NET����Ŀ��ַ\")��һ��ǿ�������ѡ���ƽ̨����Դ��.NET�ؼ�������WinForm��WPF�������ܹ�ͨ��Google, Yahoo!, Bing, OpenStreetMap, ArcGIS, Pergo, SigPac��ʵ��Ѱ��·�������������Լ���ͼչʾ���ܣ���֧�ֻ�����������Mobile�����С�<br>GMap.NET��һ����Դ��GEO��ͼ��λ�͸��ٳ��򡣾����ȸ���ͼ���Ż���ͼһ���������Զ��������صľ��룬��λ��γ�ȣ���Google��ͼ��ͬ���ǣ�����Ŀ�ǽ�����WinForm���ܻ�WPF���ܻ����ϵġ����ԶԵ�ͼ�Ŵ���С�����г��б��ǵȡ�\n  <br>\n## GMap.net for WPF ���Ƶ���Ҫ��\n��Ϊ������������GMap.net for WPFдһ����Ŀ�������Ҷ�WPF�汾������Ϥ�����д����򲻵�֮��������ָ������ͬ������\n\n* ��ͬ��Winform�汾��WPF�汾û��ͼ���ĸ����������ʾҪ�صĶ���GMapMarker�ṩ��Zindex���ԣ�������ֵ���Ļ��ڸ�����ֵС�ġ����Դ��ҿ�������Zindex�Ե���Ҫ�ؽ����߼��ϵ�ͼ��������\n \n* WinForm�汾��ͼ����ֱ������ʾ����������ͼ�ε����ԣ��磺\n    ```C#\n    GMapPolygon polygon = new GMapPolygon(pointList, \"Polygon\");\n    {\n        polygon.IsHitTestVisible = true;\n        polygon.Fill = new SolidBrush(Color.FromArgb(50, Color.Red));\n        polygon.Stroke = new Pen(Color.Blue, 2);\n    }\n    overlay.Polygons.Add(polygon);\n    ```\n    ����wpf�汾�ĵ����󣬿���ֱ��ָ����ʾ�û��ؼ����磺<br>\n    ```C#\n    GMapMarker marker = new GMapMarker(pointLatLng);\n    {\n        MyUserControl myUserControl = new MyUserControl()\n        marker.Shape = myUserControl;\n        marker.ZIndex = (int)LayerIndex.Point;\n        marker.Offset = new Point(-myUserControl.ActualWidth / 2, -myUserControl.ActualHeight / 2);\n    }\n    mapControl.Markers.Add(marker);\n    ```\n    ����MyUserControl����������UserControl�����Զ�����ʾ���ݡ�LayerIndexΪ�Զ�����ö�����͡�mapControl������GMapControl��\n    ����wpf�汾���ߵ�����������Ҫ����GMapControl��CreateRoutePath��������������������Ҫ����CreatePolygonPath������Ϊ�˲�Ӱ��ԭ���������ݣ����ǿ��Բο�GMapControl��Դ����[*GMapControl.cs*](https://greatmaps.codeplex.com/SourceControl/latest#GMap.NET.WindowsPresentation/GMap.NET.WindowsPresentation/GMapControl.cs \"�鿴Դ���ļ�\")�ļ�������CreateRoutePath������CreatePolygonPath�����������£�ֻ���������޸ģ�\n    ```C#\n    /// <summary>\n    /// creates path from list of points, for performance set addBlurEffect to false\n    /// </summary>\n    /// <param name=\"pl\"></param>\n    /// <returns></returns>\n    public override Path CreateRoutePath(List<Point> localPath, bool addBlurEffect)\n    {\n        // Create a StreamGeometry to use to specify myPath.\n        StreamGeometry geometry = new StreamGeometry();\n        \n        using (StreamGeometryContext ctx = geometry.Open())\n        {\n            ctx.BeginFigure(localPath[0], false, false);\n            \n            // Draw a line to the next specified point.\n            ctx.PolyLineTo(localPath, true, true);\n        }\n        \n        // Freeze the geometry (make it unmodifiable)\n        // for additional performance benefits.\n        geometry.Freeze();\n        \n        // Create a path to draw a geometry with.\n        Path myPath = new Path();\n        {\n            // Specify the shape of the Path using the StreamGeometry.\n            myPath.Data = geometry;\n            \n            if (addBlurEffect)\n            {\n                BlurEffect ef = new BlurEffect();\n                {\n                    ef.KernelType = KernelType.Gaussian;\n                    ef.Radius = 0.0;\n                    ef.RenderingBias = RenderingBias.Performance;\n                }\n                \n                myPath.Effect = ef;\n            }\n\n            myPath.Stroke = lineBrush;\n            myPath.StrokeThickness = lineWidth;\n            myPath.StrokeLineJoin = PenLineJoin.Round;\n            myPath.StrokeStartLineCap = PenLineCap.Triangle;\n            myPath.StrokeEndLineCap = PenLineCap.Round;\n            \n            myPath.Opacity = lineOpacity;\n            myPath.IsHitTestVisible = false;\n        }\n        return myPath;\n    }\n    ```\n    `ע��:`������lineBrush��lineWidth��lineOpacityΪ����GMapControlʱ�����Ĺ����ֶΡ�\n     \n     ```C#\n    /// <summary>\n    /// creates path from list of points, for performance set addBlurEffect to false\n    /// </summary>\n    /// <param name=\"pl\"></param>\n    /// <returns></returns>\n    public override Path CreatePolygonPath(List<Point> localPath, bool addBlurEffect)\n    {\n        // Create a StreamGeometry to use to specify myPath.\n        StreamGeometry geometry = new StreamGeometry();\n\n        using (StreamGeometryContext ctx = geometry.Open())\n        {\n            ctx.BeginFigure(localPath[0], true, true);\n\n            // Draw a line to the next specified point.\n            ctx.PolyLineTo(localPath, true, true);\n        }\n\n        // Freeze the geometry (make it unmodifiable)\n        // for additional performance benefits.\n        geometry.Freeze();\n\n        // Create a path to draw a geometry with.\n        Path myPath = new Path();\n        {\n            // Specify the shape of the Path using the StreamGeometry.\n            myPath.Data = geometry;\n\n            if (addBlurEffect)\n            {\n                BlurEffect ef = new BlurEffect();\n                {\n                    ef.KernelType = KernelType.Gaussian;\n                    ef.Radius = 0.0;\n                    ef.RenderingBias = RenderingBias.Performance;\n                }\n\n                myPath.Effect = ef;\n            }\n\n            myPath.Stroke = polygonStrokeBrush;\n            myPath.StrokeThickness = polygonThickness;\n            myPath.StrokeLineJoin = PenLineJoin.Miter;\n            myPath.StrokeStartLineCap = PenLineCap.Triangle;\n            myPath.StrokeEndLineCap = PenLineCap.Square;\n\n            myPath.Fill = polygonFillBush;\n\n            myPath.Opacity = polygonOpacity;\n            myPath.IsHitTestVisible = false;\n        }\n        return myPath;\n    }\n    ```\n    `ע��:`������polygonStrokeBrush��polygonThickness��polygonFillBush��polygonOpacityΪ����GMapControlʱ�����Ĺ����ֶΡ�\n* wpf�汾ֻ�ܻ���Point��PolyLine��Polygon����ͼ�Σ�����Բ����Ҫ���������εĻ��ơ�ʾ�����£�\n    ```C#\n    public void DrawCircle(PointLatLng center, double R)\n    {\n        double cartesianCenterX = double.MaxValue;\n        double cartesianCenterY = double.MaxValue;\n        double cartesianCenterZ = double.MaxValue;\n\n        mapControl.MapProvider.Projection.FromGeodeticToCartesian(center.Lat, center.Lng, 0, out cartesianCenterX, out cartesianCenterY, out cartesianCenterZ);//��Բ��ͶӰ���ѿ�������ϵ\n\n        int pointCount = 200;//��������Բ�Ķ����ζ�������\n\n        List<PointLatLng> polygonPointList = new List<PointLatLng>(pointCount);//���ڴ��Ŷ����ζ���\n\n        double interval = 2 * Math.PI / pointCount;\n        for (double degree = 0; degree < 2 * Math.PI; degree += interval)\n        {\n            double tempX = cartesianCenterX + R * Math.Cos(degree);\n            double tempY = cartesianCenterY + R * Math.Sin(degree);\n            double tempLng = double.MaxValue;\n            double tempLat = double.MaxValue;\n            mapControl.MapProvider.Projection.FromCartesianTGeodetic(tempX, tempY, cartesianCenterZ, out tempLat, out tempLng);//ͶӰ��WGS84����ϵ\n            polygonPointList.Add(new PointLatLng(tempLat, tempLng));\n        }\n\n        GMapPolygon circle = new GMapPolygon(polygonPointList);\n        {\n            circle.ZIndex = (int)LayerIndex.Polygon;\n        }\n        mapControl.Markers.Add(circle);//���ӵ���ͼ\n    }\n    ```\n    Ч�����£�\n    ![�鿴ͼƬ](/ref-image/GMap-Wpf-Draw-Circle.png)<br>\n    ��ΪͶӰ���⣬˵�õ�Բ��Ϊ����Բ��������������Բ�������ڳ�����ʹ��һЩWebAPI�����滻GMap��ͶӰ������������Ŀʹ�õ��Ǵ���Լ��������ϵĵ�GeoServer������Ч�����£�\n    ![�鿴ͼƬ](/ref-image/FGIS-Damage-Circle.png)<br>\n    `��ע��`����ͼƬ��ͼ�Բ�ͬ�ĳ�����\n <br>\n## GMap.net for WPF�����Զ���ͼ�겢�趨����λ��\n*����������...*","tags":["GMap.net"],"categories":["software"]},{"title":"Android学习心得","url":"/2017/08/19/Android学习心得/","content":"** 参加四维图新地图制图大赛，写了个了Android App，现在把学到的知识记录一下 ** <Excerpt in index | 首页摘要>\n<!-- more -->\n<The rest of contents | 余下全文>\n","tags":["AndroidStudio"],"categories":["language"]},{"title":"GIS-for-Web应用开发之道-学习心得","url":"/2017/08/19/GIS-for-Web应用开发之道-学习心得/","content":"** GIS-for-Web应用开发之道 读书心得 ** <Excerpt in index | 首页摘要>\n    在此感谢[康导](GIS-for-Web应用开发之道 \"Chaogui Kang\")的指导\n<!-- more -->\n<The rest of contents | 余下全文>","tags":["GIS"],"categories":["web"]},{"title":"git学习心得","url":"/2017/08/19/git学习心得/","content":"** git命令行学习小记 ** <Excerpt in index | 首页摘要>\n    利用git命令行托管代码到github，搭建自己的git服务\n<!-- more -->\n<The rest of contents | 余下全文>","tags":["Git Github"],"categories":["software"]},{"title":"在VS中使用Github","url":"/2017/08/19/在VS中使用Github/","content":"** vs中使用GitHub的方法 ** <Excerpt in index | 首页摘要>\n    将VS工程代码提交到github或自己的git服务\n<!-- more -->\n<The rest of contents | 余下全文>","tags":["Git Github VS"],"categories":["software"]},{"title":"Github使用指南","url":"/2017/08/19/Github使用指南/","content":"** 前几个月学习了Github的使用，希望我的经验能帮助到所有希望了解Github的人 ** <Excerpt in index | 首页摘要>\n    感谢在我迷惑的时候有[师兄](https://github.com/HPDell \"HPDell\")的指点。\n<!-- more -->\n<The rest of contents | 余下全文>","tags":["Github Git"],"categories":["software"]},{"title":"C#中await和async","url":"/2017/08/19/C-中await和async/","content":"** C#中await和async使用介绍 ** <Excerpt in index | 首页摘要>\n<!-- more -->\n<The rest of contents | 余下全文>\n","tags":["C#"],"categories":["language"]},{"title":"Wpf使用MahApp.Metro主题","url":"/2017/08/19/Wpf使用MahApp-Metro主题/","content":"** Wpf使用MahApp.Metro主题的步骤小记 ** <Excerpt in index | 首页摘要>\n<!-- more -->\n<The rest of contents | 余下全文>","tags":["Xaml"],"categories":["language"]},{"title":"如何利用hexo发表文章","url":"/2017/08/18/如何利用hexo发表文章/","content":"** 如何利用hexo发表文章 ** <Excerpt in index | 首页摘要>\n    本文修改自[Hexo](https://hexo.io/)自动创建的Hello-World.md，Hexo代码开源。详见[GitHub](https://github.com/hexojs/hexo/)。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n本文修改自[Hexo](https://hexo.io/)自动创建的Hello-World.md，Hexo代码开源。详见[GitHub](https://github.com/hexojs/hexo/)。\n\n## 新建文章并发表\n\n## 新建文章\n\n``` bash\n$ hexo new \"新文章\"\n```\n\n## 写文章\n详见：Hexo[官方文档](https://hexo.io/docs/writing.html)\n\n## 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n详见：Hexo[官方文档](https://hexo.io/docs/generating.html)\n\n## 启动hexo服务\n\n``` bash\n$ hexo server\n```\n\n详见：Hexo[官方文档](https://hexo.io/docs/server.html)\n\n## 部署到远程\n\n``` bash\n$ hexo deploy\n```\n\nHexo[官方文档](https://hexo.io/docs/deployment.html)\n","tags":["Hexo"],"categories":["web"]},{"title":"2017年暑假旅游笔记","url":"/2017/08/17/暑假旅游笔记/","content":"** 暑假旅行笔记 ** <Excerpt in index | 首页摘要>\n<!-- more -->\n<The rest of contents | 余下全文>\n## 起点：彭水\n持续更新...\n## 第一站：涪陵\n持续更新...\n## 第二站：重庆\n持续更新...\n## 第三站：成都\n持续更新...\n## 第四站：重庆\n持续更新...\n## 终点：彭水\n持续更新...\n","categories":["Life"]},{"title":"ISODATA算法学习心得及非监督分类软件得商业化界面实现","url":"/2017/08/17/ISODATA算法学习心得及非监督分类软件得商业化界面实现/","content":"** ISODATA和Winform ** <Excerpt in index | 首页摘要>\n    [姚剑老师](http://www.scholat.com/jianyao \"Jian Yao\")模式识别作业，代码已托管至[Github](https://github.com/CS-Tao/ImageFactory \"ImageFactory\")\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### ISODATA算法介绍\nISODATA(Iterative Selforganizing Data Analysis Techniques Algorithm)算法，即迭代自组织数据分析算法。该算法是在k-均值算法的基础上，增加对聚类结果的“合并”和“分裂”两个操作，并设定算法运行控制参数的一种聚类算法。迭代次数会影响最终结果，迭代参数选择很重要。待续...\n### 商业化界面的实现\n采用Winform实现。待续...","tags":["ISODATA"],"categories":["software"]}]