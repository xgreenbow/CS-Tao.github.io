<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦觉知晓的博客</title>
  <subtitle>千里之行 始于足下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cs-tao.github.io/"/>
  <updated>2017-10-18T14:41:47.940Z</updated>
  <id>https://cs-tao.github.io/</id>
  
  <author>
    <name>梦觉知晓</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决C#发送电子邮件失败的问题</title>
    <link href="https://cs-tao.github.io/2017/10/18/%E8%A7%A3%E5%86%B3C-%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://cs-tao.github.io/2017/10/18/解决C-发送电子邮件失败的问题/</id>
    <published>2017-10-18T00:21:15.000Z</published>
    <updated>2017-10-18T14:41:47.940Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 解决C#-WPF桌面软件发送电子邮件失败的问题 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    C#发送邮件的方法在网上搜一下可以找到很多，几个小时过去了还是没能实现，对比了很多人写的博客，笔者最终找到了问题所在，并在此记录<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul>
<li>EmailHelper.cs文件内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Text;</div><div class="line">using System.Net.Mail;</div><div class="line">using static System.Configuration.ConfigurationManager;</div><div class="line"></div><div class="line">namespace View_Spot_of_City.UIControls.Helper</div><div class="line">&#123;</div><div class="line">    public static class EmailHelper</div><div class="line">    &#123;</div><div class="line">        public static bool SendEmail(string mail, string title, string content)</div><div class="line">        &#123;</div><div class="line">            MailMessage message = new MailMessage();</div><div class="line">            &#123;</div><div class="line">                message.To.Add(mail);</div><div class="line">                message.From = new MailAddress(AppSettings[&quot;MANAGER_MAIL_NUM&quot;], AppSettings[&quot;MANAGER_MAIL_NAME&quot;], Encoding.UTF8);</div><div class="line">                message.Subject =title;</div><div class="line">                message.SubjectEncoding = Encoding.UTF8;</div><div class="line">                message.Body = content;</div><div class="line">                message.BodyEncoding = Encoding.UTF8;</div><div class="line">                message.IsBodyHtml = false;</div><div class="line">                message.Priority = MailPriority.Normal;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            SmtpClient smtp = new SmtpClient();</div><div class="line">            &#123;</div><div class="line">                smtp.Host = AppSettings[&quot;SmtpClient_HOST&quot;];</div><div class="line">                smtp.EnableSsl = true;</div><div class="line">                smtp.UseDefaultCredentials = false;</div><div class="line">                smtp.Credentials = new System.Net.NetworkCredential(AppSettings[&quot;MANAGER_MAIL_NUM&quot;], AppSettings[&quot;MANAGER_MAIL_PASSWORD&quot;]);</div><div class="line">            &#125;</div><div class="line">            object userState = message;</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                smtp.SendAsync(message, userState);</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">            catch(Exception ex)</div><div class="line">            &#123;</div><div class="line">                Console.Write(ex.Message);</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置文件App.Config内容<ul>
<li>添加``程序集的引用</li>
<li>在App.Config文件中添加键值，如下（只需要关注appSettings标签内的内容）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">configSections</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"entityFramework"</span> <span class="attr">type</span>=<span class="string">"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=*************"</span> <span class="attr">requirePermission</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">supportedRuntime</span> <span class="attr">version</span>=<span class="string">"v4.0"</span> <span class="attr">sku</span>=<span class="string">".NETFramework,Version=v4.5.2"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">appSettings</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--邮箱--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"MANAGER_MAIL_NUM"</span> <span class="attr">value</span>=<span class="string">"123456789@qq.com"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!--邮箱密码--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"MANAGER_MAIL_PASSWORD"</span> <span class="attr">value</span>=<span class="string">"邮箱密码，QQ邮箱需要许可码"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!--邮件显示名--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"MANAGER_MAIL_NAME"</span> <span class="attr">value</span>=<span class="string">"发送邮件使用的用户名"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!--QQ邮箱对应的SMTP服务器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"SmtpClient_HOST"</span> <span class="attr">value</span>=<span class="string">"smtp.qq.com"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">appSettings</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>若使用QQ邮箱，输入密码为许可码，需要在QQ邮箱中打开SMTP服务</p>
<ul>
<li>打开QQ邮箱网页版</li>
<li>点击左上角“设置”，并在导航栏中点击账户标签</li>
<li>开启SMTP服务并获得许可码<br>  <img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/WpfSendMail.png" alt="开启SMTP服务"></li>
</ul>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 解决C#-WPF桌面软件发送电子邮件失败的问题 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    C#发送邮件的方法在网上搜一下可以找到很多，几个小时过去了还是没能实现，对比了很多人写的博客，笔者最终找到了问题所在，并在此记录&lt;br&gt;
    
    </summary>
    
      <category term="software" scheme="https://cs-tao.github.io/categories/software/"/>
    
    
      <category term="C#" scheme="https://cs-tao.github.io/tags/C/"/>
    
      <category term="Wpf" scheme="https://cs-tao.github.io/tags/Wpf/"/>
    
  </entry>
  
  <entry>
    <title>WPF自定义消息框</title>
    <link href="https://cs-tao.github.io/2017/10/18/WPF%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF%E6%A1%86/"/>
    <id>https://cs-tao.github.io/2017/10/18/WPF自定义消息框/</id>
    <published>2017-10-18T00:19:17.000Z</published>
    <updated>2017-10-18T14:43:41.416Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 一个语言文化的的WPF消息框 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>消息框采用Material风格，支持中英切换，支持的返回值有Ok、Cancel、Yes、No，代码已托管并发布至<a href="https://github.com/CS-Tao/MyMessageBox/releases/tag/v1.0" target="_blank" rel="external">Github</a><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><ul>
<li>带OK按钮的消息框<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OK1.png" alt="带OK按钮的消息框"><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OK2.png" alt="带OK按钮的消息框"></li>
<li>带OK和取Cancel按钮的消息框<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OKCancel1.png" alt="带OK和取Cancel按钮的消息框"><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OKCancel2.png" alt="带OK和取Cancel按钮的消息框"></li>
<li>带Yes和No按钮的消息框<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNo1.png" alt="带Yes和No按钮的消息框"><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNo2.png" alt="带Yes和No按钮的消息框"></li>
<li>带Yes、No和Cancel按钮的消息框<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNoCancel1.png" alt="带Yes、No和Cancel按钮的消息框"><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNoCancel2.png" alt="带Yes、No和Cancel按钮的消息框"></li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><ul>
<li>引用本消息框所在程序集。</li>
<li>在App.xaml文件中添加：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">"pack://application:,,,/CSTao.MessageBox;component/Resources.xaml"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>如下：<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MessageBoxResoureCode.png" alt="添加资源字典"></p>
<h3 id="使用MessageBox"><a href="#使用MessageBox" class="headerlink" title="使用MessageBox"></a>使用MessageBox</h3><ul>
<li><p>在程序中需要使用的地方添加命名空间：<br></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">using CSTao.MessageBox;</div></pre></td></tr></table></figure>
</li>
<li><p>调用MessageboxMaster.Show()函数，该函数有多个重载，请按您的需求使用。</p>
<h3 id="使用语言切换"><a href="#使用语言切换" class="headerlink" title="使用语言切换"></a>使用语言切换</h3></li>
<li>静态修改<br><br>将<code>MyMessageBox\MyMessagebox\CSTao.MessageBox\Languages\LanguagesDictionary.xaml</code>中的<code>Language.CN.xaml</code>改为<code>Language.EN.xaml</code>即可。</li>
<li>动态修改<br><br>在您定义的修改语言的响应函数中添加代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">string requestedCulture = string.Format(@&quot;pack://application:,,,/CSTao.MessageBox;component/Languages/Language.&#123;0&#125;.xaml&quot;, languageDictionary[0或1]);</div><div class="line">ResourceDictionary resourceDictionary = Application.Current.Resources.MergedDictionaries.FirstOrDefault((x) =&gt;</div><div class="line">&#123;</div><div class="line">    return (x.Source == null) ? false : (x.Source.OriginalString.Contains(&quot;CSTao.MessageBox;component/Languages&quot;));</div><div class="line">&#125;);</div><div class="line">if (resourceDictionary != null)</div><div class="line">&#123;</div><div class="line">    Application.Current.Resources.MergedDictionaries.Remove(resourceDictionary);</div><div class="line">    ResourceDictionary requestDictionary = new ResourceDictionary()</div><div class="line">    &#123;</div><div class="line">        Source = new Uri(requestedCulture)</div><div class="line">    &#125;;</div><div class="line">    Application.Current.Resources.MergedDictionaries.Add(requestDictionary);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>温馨提醒:</code>本方法是笔者用于全局改变软件语言的代码，不仅针对本消息框，慎用</p>
<h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>修改<code>MyMessageBox\MyMessagebox\CSTao.MessageBox\Resources.xaml</code>中<code>PrimaryHueBrush</code>键的值即可</p>
<h2 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h2><p>感谢<a href="https://hpdell.github.io/" target="_blank" rel="external">师兄</a>提供的代码参考。</p>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 一个语言文化的的WPF消息框 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;消息框采用Material风格，支持中英切换，支持的返回值有Ok、Cancel、Yes、No，代码已托管并发布至&lt;a href=&quot;https://github.com/CS-Tao/MyMessageBox/releases/tag/v1.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="software" scheme="https://cs-tao.github.io/categories/software/"/>
    
    
      <category term="C#" scheme="https://cs-tao.github.io/tags/C/"/>
    
      <category term="Wpf" scheme="https://cs-tao.github.io/tags/Wpf/"/>
    
  </entry>
  
  <entry>
    <title>关于带登录界面的WPF应用的问题</title>
    <link href="https://cs-tao.github.io/2017/10/11/%E5%85%B3%E4%BA%8E%E5%B8%A6%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%E7%9A%84WPF%E5%BA%94%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://cs-tao.github.io/2017/10/11/关于带登录界面的WPF应用的问题/</id>
    <published>2017-10-11T15:24:18.000Z</published>
    <updated>2017-10-18T14:43:44.170Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 解决WPF关闭登录窗口后主窗口无法打开的问题 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    笔者最近在开发一款<a href="https://github.com/CS-Tao/View-Spot-of-City" target="_blank" rel="external">WPF应用程序</a>的时候，发现在登录窗口关闭之后，主窗口无法打开，遂上网搜索了一下，找到了问题所在<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>笔者通过重载App类OnStartup()函数，在其中添加了启动登录框的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">protected override void OnStartup(StartupEventArgs e)</div><div class="line">&#123;</div><div class="line">    //验证License</div><div class="line">    if (!RegisterMaster.CanStart())</div><div class="line">    &#123;</div><div class="line">        Environment.Exit(0);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //登录</div><div class="line">    bool? loginDlgResult = (new LoginDlg()).ShowDialog();</div><div class="line">    if (!loginDlgResult.HasValue || !loginDlgResult.Value)</div><div class="line">        Environment.Exit(0);</div><div class="line"></div><div class="line">    base.OnStartup(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>却发现登录窗口关闭后不能启动主窗口（也就是WPF自动生成的MainWindow类对应的窗口）。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>将App的ShutdownMode属性改为OnExplicitShutdown即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">protected override void OnStartup(StartupEventArgs e)</div><div class="line">&#123;</div><div class="line">    //应用程序关闭时，才System.Windows.Application.Shutdown调用</div><div class="line">    this.ShutdownMode = ShutdownMode.OnExplicitShutdown;</div><div class="line"></div><div class="line">    //验证License</div><div class="line">    if (!RegisterMaster.CanStart())</div><div class="line">    &#123;</div><div class="line">        Environment.Exit(0);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //登录</div><div class="line">    bool? loginDlgResult = (new LoginDlg()).ShowDialog();</div><div class="line">    if (!loginDlgResult.HasValue || !loginDlgResult.Value)</div><div class="line">        Environment.Exit(0);</div><div class="line"></div><div class="line">    base.OnStartup(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>注意：</code>需要关闭应用程序时需要显示调用System.Windows.Application.Shutdown()函数，或其他退出程序的函数。</p>
<h2 id="出现问题的原因"><a href="#出现问题的原因" class="headerlink" title="出现问题的原因"></a>出现问题的原因</h2><p>由上我们可以看出问题的根源就是App的ShutdownMode属性，那么这个属性有什么意义呢？<br><br>我们可以很容易地知道ShutdownMode是一个枚举属性，其可能得取值有三个，分别是OnLastWindowClose、OnMainWindowClose、OnExplicitShutdown。<br>进一步探索笔者发现ShutdownMode属性的默认值为OnLastWindowClose，也就是WPF会在最后一个窗口关闭时隐式调用Application的Shutdown()函数，对此MSDN中有提到：<a href="https://msdn.microsoft.com/zh-cn/subscriptions/system.windows.application.shutdownmode(v=vs.100).aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/subscriptions/system.windows.application.shutdownmode(v=vs.100).aspx</a><br></p>
<blockquote>
<p>如果将 ShutdownMode 设置为 OnLastWindowClose，则 Windows Presentation Foundation (WPF) 会在应用程序中的最后一个窗口关闭时隐式调用 Shutdown，即使任何当前已经实例化的窗口被设置为主窗口也是如此。请参见 <a href="https://msdn.microsoft.com/zh-cn/subscriptions/system.windows.application.mainwindow(v=vs.100).aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/subscriptions/system.windows.application.mainwindow(v=vs.100).aspx</a></p>
</blockquote>
<p>WPF会把第一个在AppDomain中实例化的第一个Window对象的引用，自动设置为应用程序的主窗口，也就是说当登录框实例化的时候，就被设置为主窗口了。且当登录窗口关闭时，没有任何其他的窗口处于显示状态，满足<code>OnLastWindowClose</code>的退出条件，WPF会隐式调用ShutDown()，以至于真正的主窗口无法显示。</p>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 解决WPF关闭登录窗口后主窗口无法打开的问题 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    笔者最近在开发一款&lt;a href=&quot;https://github.com/CS-Tao/View-Spot-of-City&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WPF应用程序&lt;/a&gt;的时候，发现在登录窗口关闭之后，主窗口无法打开，遂上网搜索了一下，找到了问题所在&lt;br&gt;
    
    </summary>
    
      <category term="software" scheme="https://cs-tao.github.io/categories/software/"/>
    
    
      <category term="Wpf" scheme="https://cs-tao.github.io/tags/Wpf/"/>
    
  </entry>
  
  <entry>
    <title>Android工具包-xUtils基本使用</title>
    <link href="https://cs-tao.github.io/2017/09/21/Android%E5%B7%A5%E5%85%B7%E5%8C%85-xUtils%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://cs-tao.github.io/2017/09/21/Android工具包-xUtils基本使用/</id>
    <published>2017-09-21T02:34:33.000Z</published>
    <updated>2017-09-21T02:46:01.845Z</updated>
    
    <content type="html"><![CDATA[<p><strong> xUtils基本使用 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    本文转自<a href="http://www.oschina.net/p/xutils?fromerr=FllYBeuf" title="查看原文" target="_blank" rel="external">开源中国</a>，因为原文的markdown格式出于某种原因未渲染，笔者将其转到了自己博客，方便查看<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="xUtils3简介"><a href="#xUtils3简介" class="headerlink" title="xUtils3简介"></a>xUtils3简介</h2><ul>
<li>xUtils 包含了orm, http(s), image, view注解, 但依然很轻量级(246K), 并且特性强大, 方便扩展:<ul>
<li><code>稳定的基石</code>: <code>AbsTask</code>和统一的回调接口<code>Callback</code>, 任何异常, 即使你的回调方法实现有异常都会进入<code>onError</code>, 任何情况下<code>onFinished</code>总会让你知道任务结束了.</li>
<li>基于高效稳定的<code>orm</code>工具, <code>http</code>模块得以更方便的实现cookie(支持domain, path, expiry等特性)和<br>缓存(支持Cache-Control, Last-Modified, ETag等特性)的支持.</li>
<li>有了强大的<code>http</code>及其下载缓存的支持, <code>image</code>模块的实现相当的简洁, 并且支持回收被view持有, 但被Mem Cache移除的图片, 减少页面回退时的闪烁..</li>
<li><code>view</code>注解模块仅仅400多行代码却灵活的支持了各种View注入和事件绑定, 包括拥有多了方法的listener的支持.</li>
</ul>
</li>
</ul>
<h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><ul>
<li>支持超大文件(超过2G)上传</li>
<li>更全面的http请求协议支持(11种谓词)</li>
<li>拥有更加灵活的ORM, 和greenDao一致的性能</li>
<li>更多的事件注解支持且不受混淆影响…</li>
<li>图片绑定支持gif(受系统兼容性影响, 部分gif文件只能静态显示), webp; 支持圆角, 圆形, 方形等裁剪, 支持自动旋转…</li>
<li>从3.5.0开始不再包含libwebpbackport.so, 需要在Android4.2以下设备兼容webp的请使用3.4.0版本.</li>
</ul>
<h4 id="使用Gradle构建时添加一下依赖即可"><a href="#使用Gradle构建时添加一下依赖即可" class="headerlink" title="使用Gradle构建时添加一下依赖即可:"></a>使用Gradle构建时添加一下依赖即可:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'org.xutils:xutils:3.5.0'</span></div></pre></td></tr></table></figure>
<h5 id="如果使用eclipse可以-点击这里下载aar文件-然后用zip解压-取出jar文件"><a href="#如果使用eclipse可以-点击这里下载aar文件-然后用zip解压-取出jar文件" class="headerlink" title="如果使用eclipse可以 点击这里下载aar文件, 然后用zip解压, 取出jar文件."></a>如果使用eclipse可以 <a href="http://dl.bintray.com/wyouflf/maven/org/xutils/xutils/" target="_blank" rel="external">点击这里下载aar文件</a>, 然后用zip解压, 取出jar文件.</h5><h5 id="混淆配置参考示例项目sample的配置"><a href="#混淆配置参考示例项目sample的配置" class="headerlink" title="混淆配置参考示例项目sample的配置"></a>混淆配置参考示例项目sample的配置</h5><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题:"></a>常见问题:</h4><ol>
<li>更好的管理图片缓存: <a href="https://github.com/wyouflf/xUtils3/issues/149" target="_blank" rel="external">https://github.com/wyouflf/xUtils3/issues/149</a></li>
<li>Cookie的使用: <a href="https://github.com/wyouflf/xUtils3/issues/125" target="_blank" rel="external">https://github.com/wyouflf/xUtils3/issues/125</a></li>
<li>关于query参数? http请求可以通过 header, url, body(请求体)传参; query参数是url中问号(?)后面的参数.</li>
<li>关于body参数? body参数只有PUT, POST, PATCH, DELETE(老版本RFC2616文档没有明确指出它是否支持, 所以暂时支持)请求支持.</li>
<li>自定义Http参数对象和结果解析: <a href="https://github.com/wyouflf/xUtils3/issues/191" target="_blank" rel="external">https://github.com/wyouflf/xUtils3/issues/191</a></li>
</ol>
<h4 id="使用前配置"><a href="#使用前配置" class="headerlink" title="使用前配置"></a>使用前配置</h4><h5 id="需要的权限"><a href="#需要的权限" class="headerlink" title="需要的权限"></a>需要的权限</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在application的onCreate中初始化</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    x.Ext.init(<span class="keyword">this</span>);</div><div class="line">    x.Ext.setDebug(BuildConfig.DEBUG); <span class="comment">// 是否输出debug日志, 开启debug会影响性能.</span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-Event事件注解-ContentView-ViewInject等更多示例参考sample项目"><a href="#使用-Event事件注解-ContentView-ViewInject等更多示例参考sample项目" class="headerlink" title="使用@Event事件注解(@ContentView, @ViewInject等更多示例参考sample项目)"></a>使用@Event事件注解(@ContentView, @ViewInject等更多示例参考sample项目)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 1. 方法必须私有限定,</span></div><div class="line"><span class="comment"> * 2. 方法参数形式必须和type对应的Listener接口一致.</span></div><div class="line"><span class="comment"> * 3. 注解参数value支持数组: value=&#123;id1, id2, id3&#125;</span></div><div class="line"><span class="comment"> * 4. 其它参数说明见&#123;<span class="doctag">@link</span> org.xutils.event.annotation.Event&#125;类的说明.</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="meta">@Event</span>(value = R.id.btn_test_baidu1,</div><div class="line">        type = View.OnClickListener.class<span class="comment">/*可选参数, 默认是View.OnClickListener.class*/</span>)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onTestBaidu1Click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="访问网络-更多示例参考sample项目"><a href="#访问网络-更多示例参考sample项目" class="headerlink" title="访问网络(更多示例参考sample项目)"></a>访问网络(更多示例参考sample项目)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 自定义实体参数类请参考:</span></div><div class="line"><span class="comment"> * 请求注解 &#123;<span class="doctag">@link</span> org.xutils.http.annotation.HttpRequest&#125;</span></div><div class="line"><span class="comment"> * 请求注解处理模板接口 &#123;<span class="doctag">@link</span> org.xutils.http.app.ParamsBuilder&#125;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 需要自定义类型作为callback的泛型时, 参考:</span></div><div class="line"><span class="comment"> * 响应注解 &#123;<span class="doctag">@link</span> org.xutils.http.annotation.HttpResponse&#125;</span></div><div class="line"><span class="comment"> * 响应注解处理模板接口 &#123;<span class="doctag">@link</span> org.xutils.http.app.ResponseParser&#125;</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 示例: 查看 org.xutils.sample.http 包里的代码</span></div><div class="line"><span class="comment"> */</span></div><div class="line">BaiduParams params = <span class="keyword">new</span> BaiduParams();</div><div class="line">params.wd = <span class="string">"xUtils"</span>;</div><div class="line"><span class="comment">// 有上传文件时使用multipart表单, 否则上传原始文件流.</span></div><div class="line"><span class="comment">// params.setMultipart(true);</span></div><div class="line"><span class="comment">// 上传文件方式 1</span></div><div class="line"><span class="comment">// params.uploadFile = new File("/sdcard/test.txt");</span></div><div class="line"><span class="comment">// 上传文件方式 2</span></div><div class="line"><span class="comment">// params.addBodyParameter("uploadFile", new File("/sdcard/test.txt"));</span></div><div class="line">Callback.Cancelable cancelable</div><div class="line">       = x.http().get(params,</div><div class="line">       <span class="comment">/**</span></div><div class="line"><span class="comment">        * 1. callback的泛型:</span></div><div class="line"><span class="comment">        * callback参数默认支持的泛型类型参见&#123;<span class="doctag">@link</span> org.xutils.http.loader.LoaderFactory&#125;,</span></div><div class="line"><span class="comment">        * 例如: 指定泛型为File则可实现文件下载, 使用params.setSaveFilePath(path)指定文件保存的全路径.</span></div><div class="line"><span class="comment">        * 默认支持断点续传(采用了文件锁和尾端校验续传文件的一致性).</span></div><div class="line"><span class="comment">        * 其他常用类型可以自己在LoaderFactory中注册,</span></div><div class="line"><span class="comment">        * 也可以使用&#123;<span class="doctag">@link</span> org.xutils.http.annotation.HttpResponse&#125;</span></div><div class="line"><span class="comment">        * 将注解HttpResponse加到自定义返回值类型上, 实现自定义ResponseParser接口来统一转换.</span></div><div class="line"><span class="comment">        * 如果返回值是json形式, 那么利用第三方的json工具将十分容易定义自己的ResponseParser.</span></div><div class="line"><span class="comment">        * 如示例代码&#123;<span class="doctag">@link</span> org.xutils.sample.http.BaiduResponse&#125;, 可直接使用BaiduResponse作为</span></div><div class="line"><span class="comment">        * callback的泛型.</span></div><div class="line"><span class="comment">        *</span></div><div class="line"><span class="comment">        * 2. callback的组合:</span></div><div class="line"><span class="comment">        * 可以用基类或接口组合个种类的Callback, 见&#123;<span class="doctag">@link</span> org.xutils.common.Callback&#125;.</span></div><div class="line"><span class="comment">        * 例如:</span></div><div class="line"><span class="comment">        * a. 组合使用CacheCallback将使请求检测缓存或将结果存入缓存(仅GET请求生效).</span></div><div class="line"><span class="comment">        * b. 组合使用PrepareCallback的prepare方法将为callback提供一次后台执行耗时任务的机会,</span></div><div class="line"><span class="comment">        * 然后将结果给onCache或onSuccess.</span></div><div class="line"><span class="comment">        * c. 组合使用ProgressCallback将提供进度回调.</span></div><div class="line"><span class="comment">        * ...(可参考&#123;<span class="doctag">@link</span> org.xutils.image.ImageLoader&#125;</span></div><div class="line"><span class="comment">        * 或 示例代码中的 &#123;<span class="doctag">@link</span> org.xutils.sample.download.DownloadCallback&#125;)</span></div><div class="line"><span class="comment">        *</span></div><div class="line"><span class="comment">        * 3. 请求过程拦截或记录日志: 参考 &#123;<span class="doctag">@link</span> org.xutils.http.app.RequestTracker&#125;</span></div><div class="line"><span class="comment">        *</span></div><div class="line"><span class="comment">        * 4. 请求Header获取: 参考 &#123;<span class="doctag">@link</span> org.xutils.http.app.RequestInterceptListener&#125;</span></div><div class="line"><span class="comment">        *</span></div><div class="line"><span class="comment">        * 5. 其他(线程池, 超时, 重定向, 重试, 代理等): 参考 &#123;<span class="doctag">@link</span> org.xutils.http.RequestParams&#125;</span></div><div class="line"><span class="comment">        *</span></div><div class="line"><span class="comment">        **/</span></div><div class="line">       <span class="keyword">new</span> Callback.CommonCallback() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">               Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable ex, <span class="keyword">boolean</span> isOnCallback)</span> </span>&#123;</div><div class="line">               <span class="comment">//Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();</span></div><div class="line">               <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> HttpException) &#123; <span class="comment">// 网络错误</span></div><div class="line">                   HttpException httpEx = (HttpException) ex;</div><div class="line">                   <span class="keyword">int</span> responseCode = httpEx.getCode();</div><div class="line">                   String responseMsg = httpEx.getMessage();</div><div class="line">                   String errorResult = httpEx.getResult();</div><div class="line">                   <span class="comment">// ...</span></div><div class="line">               &#125; <span class="keyword">else</span> &#123; <span class="comment">// 其他错误</span></div><div class="line">                   <span class="comment">// ...</span></div><div class="line">               &#125;</div><div class="line">               Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(CancelledException cex)</span> </span>&#123;</div><div class="line">               Toast.makeText(x.app(), <span class="string">"cancelled"</span>, Toast.LENGTH_LONG).show();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinished</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line"><span class="comment">// cancelable.cancel(); // 取消请求</span></div></pre></td></tr></table></figure>
<h4 id="如果你只需要一个简单的版本"><a href="#如果你只需要一个简单的版本" class="headerlink" title="如果你只需要一个简单的版本:"></a>如果你只需要一个简单的版本:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Event</span>(value = R.id.btn_test_baidu2)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onTestBaidu2Click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    RequestParams params = <span class="keyword">new</span> RequestParams(<span class="string">"https://www.baidu.com/s"</span>);</div><div class="line">    params.setSslSocketFactory(...); <span class="comment">// 设置ssl</span></div><div class="line">    params.addQueryStringParameter(<span class="string">"wd"</span>, <span class="string">"xUtils"</span>);</div><div class="line">    x.http().get(params, <span class="keyword">new</span> Callback.CommonCallback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">            Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable ex, <span class="keyword">boolean</span> isOnCallback)</span> </span>&#123;</div><div class="line">            Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(CancelledException cex)</span> </span>&#123;</div><div class="line">            Toast.makeText(x.app(), <span class="string">"cancelled"</span>, Toast.LENGTH_LONG).show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinished</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<h4 id="带有缓存的请求示例"><a href="#带有缓存的请求示例" class="headerlink" title="带有缓存的请求示例:"></a>带有缓存的请求示例:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">BaiduParams params = <span class="keyword">new</span> BaiduParams();</div><div class="line">params.wd = <span class="string">"xUtils"</span>;</div><div class="line"><span class="comment">// 默认缓存存活时间, 单位:毫秒.(如果服务没有返回有效的max-age或Expires)</span></div><div class="line">params.setCacheMaxAge(<span class="number">1000</span> * <span class="number">60</span>);</div><div class="line">Callback.Cancelable cancelable</div><div class="line">       <span class="comment">// 使用CacheCallback, xUtils将为该请求缓存数据.</span></div><div class="line">      = x.http().get(params, <span class="keyword">new</span> Callback.CacheCallback() &#123;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> hasError = <span class="keyword">false</span>;</div><div class="line">   <span class="keyword">private</span> String result = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCache</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">      <span class="comment">// 得到缓存数据, 缓存过期后不会进入这个方法.</span></div><div class="line">      <span class="comment">// 如果服务端没有返回过期时间, 参考params.setCacheMaxAge(maxAge)方法.</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="comment">// * 客户端会根据服务端返回的 header 中 max-age 或 expires 来确定本地缓存是否给 onCache 方法.</span></div><div class="line">        <span class="comment">//   如果服务端没有返回 max-age 或 expires, 那么缓存将一直保存, 除非这里自己定义了返回false的</span></div><div class="line">        <span class="comment">//   逻辑, 那么xUtils将请求新数据, 来覆盖它.</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="comment">// * 如果信任该缓存返回 true, 将不再请求网络;</span></div><div class="line">        <span class="comment">//   返回 false 继续请求网络, 但会在请求头中加上ETag, Last-Modified等信息,</span></div><div class="line">        <span class="comment">//   如果服务端返回304, 则表示数据没有更新, 不继续加载数据.</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="keyword">this</span>.result = result;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// true: 信任缓存数据, 不在发起网络请求; false不信任缓存数据.</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">      <span class="comment">// 注意: 如果服务返回304 或 onCache 选择了信任缓存, 这时result为null.</span></div><div class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">this</span>.result = result;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable ex, <span class="keyword">boolean</span> isOnCallback)</span> </span>&#123;</div><div class="line">      hasError = <span class="keyword">true</span>;</div><div class="line">      Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();</div><div class="line">      <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> HttpException) &#123; <span class="comment">// 网络错误</span></div><div class="line">         HttpException httpEx = (HttpException) ex;</div><div class="line">         <span class="keyword">int</span> responseCode = httpEx.getCode();</div><div class="line">         String responseMsg = httpEx.getMessage();</div><div class="line">         String errorResult = httpEx.getResult();</div><div class="line">         <span class="comment">// ...</span></div><div class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 其他错误</span></div><div class="line">         <span class="comment">// ...</span></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(CancelledException cex)</span> </span>&#123;</div><div class="line">      Toast.makeText(x.app(), <span class="string">"cancelled"</span>, Toast.LENGTH_LONG).show();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinished</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!hasError &amp;&amp; result != <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="comment">// 成功获取数据</span></div><div class="line">         Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="使用数据库-更多示例参考sample项目"><a href="#使用数据库-更多示例参考sample项目" class="headerlink" title="使用数据库(更多示例参考sample项目)"></a>使用数据库(更多示例参考sample项目)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Parent test = db.selector(Parent.class).where(<span class="string">"id"</span>, <span class="string">"in"</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>&#125;).findFirst();</div><div class="line"><span class="keyword">long</span> count = db.selector(Parent.class).where(<span class="string">"name"</span>, <span class="string">"LIKE"</span>, <span class="string">"w%"</span>).and(<span class="string">"age"</span>, <span class="string">"&gt;"</span>, <span class="number">32</span>).count();</div><div class="line">List testList = db.selector(Parent.class).where(<span class="string">"id"</span>, <span class="string">"between"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>, <span class="string">"5"</span>&#125;).findAll();</div></pre></td></tr></table></figure>
<h3 id="绑定图片-更多示例参考sample项目"><a href="#绑定图片-更多示例参考sample项目" class="headerlink" title="绑定图片(更多示例参考sample项目)"></a>绑定图片(更多示例参考sample项目)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">x.image().bind(imageView, url, imageOptions);</div><div class="line"></div><div class="line"><span class="comment">// assets file</span></div><div class="line">x.image().bind(imageView, <span class="string">"assets://test.gif"</span>, imageOptions);</div><div class="line"></div><div class="line"><span class="comment">// local file</span></div><div class="line">x.image().bind(imageView, <span class="keyword">new</span> File(<span class="string">"/sdcard/test.gif"</span>).toURI().toString(), imageOptions);</div><div class="line">x.image().bind(imageView, <span class="string">"/sdcard/test.gif"</span>, imageOptions);</div><div class="line">x.image().bind(imageView, <span class="string">"file:///sdcard/test.gif"</span>, imageOptions);</div><div class="line">x.image().bind(imageView, <span class="string">"file:/sdcard/test.gif"</span>, imageOptions);</div><div class="line"></div><div class="line">x.image().bind(imageView, url, imageOptions, <span class="keyword">new</span> Callback.CommonCallback() &#123;...&#125;);</div><div class="line">x.image().loadDrawable(url, imageOptions, <span class="keyword">new</span> Callback.CommonCallback() &#123;...&#125;);</div><div class="line"><span class="comment">// 用来获取缓存文件</span></div><div class="line">x.image().loadFile(url, imageOptions, <span class="keyword">new</span> Callback.CommonCallback() &#123;...&#125;);</div></pre></td></tr></table></figure>
<hr>
<h3 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h3><ul>
<li>Email： , </li>
<li>有任何建议或者使用中遇到问题都可以给我发邮件, 你也可以加入QQ群：330445659(已满), 275967695, 257323060,<br>384426013, 176778777, 169852490, 261053948, 330108003, 技术交流，idea分享 <em>_</em></li>
</ul>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; xUtils基本使用 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    本文转自&lt;a href=&quot;http://www.oschina.net/p/xutils?fromerr=FllYBeuf&quot; title=&quot;查看原文&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开源中国&lt;/a&gt;，因为原文的markdown格式出于某种原因未渲染，笔者将其转到了自己博客，方便查看&lt;br&gt;
    
    </summary>
    
      <category term="software" scheme="https://cs-tao.github.io/categories/software/"/>
    
    
      <category term="Android" scheme="https://cs-tao.github.io/tags/Android/"/>
    
      <category term="xUtils" scheme="https://cs-tao.github.io/tags/xUtils/"/>
    
  </entry>
  
  <entry>
    <title>Js利用百度地图API进行坐标转换</title>
    <link href="https://cs-tao.github.io/2017/09/04/Js%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6API%E8%BF%9B%E8%A1%8C%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    <id>https://cs-tao.github.io/2017/09/04/Js利用百度API进行坐标转换/</id>
    <published>2017-09-04T13:10:59.000Z</published>
    <updated>2017-09-04T17:39:45.668Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 百度地图API for JavaScript的使用 </strong><excerpt in="" index="" |="" 首页摘要=""><br>在Js中利用百度地图API对地理坐标系和投影坐标系（墨卡托）进行互转<br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h2 id="导入js文件"><a href="#导入js文件" class="headerlink" title="导入js文件"></a>导入js文件</h2><p>在html文件中添加<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"http://api.map.baidu.com/api?v=1.2"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h2 id="地理坐标转为平面坐标"><a href="#地理坐标转为平面坐标" class="headerlink" title="地理坐标转为平面坐标"></a>地理坐标转为平面坐标</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> projection = <span class="keyword">new</span> BMap.MercatorProjection();</div><div class="line"><span class="keyword">var</span> mercatorPoint = projection.lngLatToPoint(<span class="keyword">new</span> BMap.Point(<span class="number">114.3908</span>, <span class="number">30.4879</span>));</div><div class="line">alert(<span class="string">"x = "</span> + mercatorPoint.x + <span class="string">", y = "</span> + mercatorPoint.y);</div></pre></td></tr></table></figure>
<h2 id="平面坐标转为地理坐标"><a href="#平面坐标转为地理坐标" class="headerlink" title="平面坐标转为地理坐标"></a>平面坐标转为地理坐标</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> projection = <span class="keyword">new</span> BMap.MercatorProjection();</div><div class="line"><span class="keyword">var</span> lngLat = projection.pointToLngLat(<span class="keyword">new</span> BMap.Pixel(<span class="number">12734064.16</span>, <span class="number">3544542.8</span>));</div><div class="line">alert(<span class="string">"lng = "</span> + lngLat.lng + <span class="string">", lat = "</span> + lngLat.lat);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 百度地图API for JavaScript的使用 &lt;/strong&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;在Js中利用百度地图API对地理坐标系和投影坐标系（墨卡托）进行互转&lt;br&gt;
    
    </summary>
    
      <category term="language" scheme="https://cs-tao.github.io/categories/language/"/>
    
    
      <category term="Js" scheme="https://cs-tao.github.io/tags/Js/"/>
    
      <category term="JacaScript" scheme="https://cs-tao.github.io/tags/JacaScript/"/>
    
      <category term="百度API" scheme="https://cs-tao.github.io/tags/%E7%99%BE%E5%BA%A6API/"/>
    
  </entry>
  
  <entry>
    <title>夜跑助手App-路径规划的实现</title>
    <link href="https://cs-tao.github.io/2017/09/03/%E5%A4%9C%E8%B7%91%E5%8A%A9%E6%89%8BApp-%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://cs-tao.github.io/2017/09/03/夜跑助手App-路径规划的实现/</id>
    <published>2017-09-03T08:34:55.000Z</published>
    <updated>2017-09-03T14:51:16.966Z</updated>
    
    <content type="html"><![CDATA[<p><strong> <a href="https://github.com/CS-Tao/Route-NightRun" target="_blank" rel="external">夜跑助手App</a>路径规划的实现 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    夜跑助手App是我们小组参加四维图新地图制图大赛的成果之一，现在对其中的夜跑路径规划的方式进行记录<br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h2 id="按站点进行路径规划"><a href="#按站点进行路径规划" class="headerlink" title="按站点进行路径规划"></a>按站点进行路径规划</h2><h3 id="原理和方法"><a href="#原理和方法" class="headerlink" title="原理和方法"></a>原理和方法</h3><p>按站点进行路径规划的方式主要是利用<a href="https://www.graphhopper.com/" target="_blank" rel="external">GraphHopper</a>提供的WebAPI进行路径规划，通过对Rest接口发送Get请求获取json数据，如<a href="https://graphhopper.com/api/1/route?point=49.932707,11.588051&amp;point=50.3404,11.64705&amp;vehicle=car&amp;debug=false&amp;key=f8821850-c1f8-4f8f-befb-f976c887ebfb&amp;optimize=true" target="_blank" rel="external">示例</a>。</p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ul>
<li>通过用户在手机屏幕上的双击操作获得用户希望经过的站点并进行标记</li>
<li>在用户指定的站点链表的首位加上用户位置</li>
<li>将上一步产生的站点列表投影为地理坐标</li>
<li>生成http请求</li>
<li>得到返回的json数据</li>
<li>解析数据，此时便可得到路径信息</li>
<li>将路径显示到屏幕上</li>
<li>同时计算路径附近两百米形成的地理坐标框，发送http请求到我们自己的服务器</li>
<li>得到饮品店信息并进行显示</li>
</ul>
<p>流程图如下：<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E7%AB%99%E7%82%B9%E7%9A%84%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92.png" alt="流程图"><br><br>效果图如下：<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E7%AB%99%E7%82%B9%E8%A7%84%E5%88%92%E8%B7%AF%E5%BE%841.jpg" alt="App截屏"><br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E7%AB%99%E7%82%B9%E8%A7%84%E5%88%92%E8%B7%AF%E5%BE%842.jpg" alt="App截屏"><br></p>
<h2 id="按路径长度进行路径规划"><a href="#按路径长度进行路径规划" class="headerlink" title="按路径长度进行路径规划"></a>按路径长度进行路径规划</h2><h3 id="原理和方法-1"><a href="#原理和方法-1" class="headerlink" title="原理和方法"></a>原理和方法</h3><p>按路径长度进行路径规划相比于按站点的路径规划显得更加复杂，需要预定若干站点，并对符合预定要求的站点依次利用GraphHopper的Rest接口计算最短距离，接着得到与指定路径长度的一半最接近的距离和其对应的站点，最后通过GraphHopper得到最短路径。</p>
<h3 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h3><p><code>注意：</code>夜跑区域的站点数据，由App维护人员通过其他软件采集并上传到数据库，软件已托管至<a href="https://github.com/CS-Tao/DataAcquisitionForNightRunning" target="_blank" rel="external">Github</a>。</p>
<ul>
<li>用户输入路径长度，设为a</li>
<li>得到以用户为中心周围a/4到a/2区域内的所有站点</li>
<li>依次利用GraphHopper的最短路径接口发送http请求，并获得用户位置到上一步所有站点的路径距离</li>
<li>将这些距离值与与a/2比较，得到与a/2最接近的距离，并记录其对应的站点</li>
<li>通过发送http请求获得用户位置到该站点的最短路径</li>
<li>解析数据并显示路径</li>
<li>显示附近的饮品店，和之前的方式一样，在此不详述</li>
</ul>
<p>流程图如下：<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E8%BF%9B%E8%A1%8C%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92.png" alt="流程图"><br><br>效果图如下：<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E8%BF%9B%E8%A1%8C%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%921.png" alt="App截屏"><br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E8%BF%9B%E8%A1%8C%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%922.png" alt="App截屏"><br></p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>按指定站点进行路径规划得到的是环形回路，按指定路径长度得到的是一条供往返的线路。笔者思考了很久，最终采用了如上文叙述的方法进行按路径长度规划路径，如果您有更好的方法，无论是算法还是工具，希望您能在评论中指出，共同进步，非常感谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; &lt;a href=&quot;https://github.com/CS-Tao/Route-NightRun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;夜跑助手App&lt;/a&gt;路径规划的实现 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    夜跑助手App是我们小组参加四维图新地图制图大赛的成果之一，现在对其中的夜跑路径规划的方式进行记录&lt;br&gt;
    
    </summary>
    
      <category term="software" scheme="https://cs-tao.github.io/categories/software/"/>
    
    
      <category term="Android" scheme="https://cs-tao.github.io/tags/Android/"/>
    
      <category term="Java" scheme="https://cs-tao.github.io/tags/Java/"/>
    
      <category term="WebAPI" scheme="https://cs-tao.github.io/tags/WebAPI/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu系统下的PostgreSQL安装和配置</title>
    <link href="https://cs-tao.github.io/2017/09/02/Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84PostgreSQL%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://cs-tao.github.io/2017/09/02/Ubuntu系统下的PostgreSQL安装和配置/</id>
    <published>2017-09-02T15:20:58.000Z</published>
    <updated>2017-09-07T04:38:48.431Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Ubuntu 16.04系统下的PostgreSQL 9.6安装和配置的详细步骤 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>PostgreSQL 是一个自由的对象-关系数据库服务器(数据库管理系统)，它在 BSD-风格许可证下发行<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="PostgreSQL介绍"><a href="#PostgreSQL介绍" class="headerlink" title="PostgreSQL介绍"></a>PostgreSQL介绍</h2><p><a href="https://www.postgresql.org/" target="_blank" rel="external">PostgreSQL</a>是以加州大学伯克利分校计算机系开发的 POSTGRES，现在已经更名为PostgreSQL，版本 4.2为基础的对象关系型数据库管理系统（ORDBMS），开发语言为C/C++。PostgreSQL支持大部分 SQL标准并且提供了许多其他现代特性：复杂查询、外键、触发器、视图、事务完整性、MVCC。同样，PostgreSQL 可以用许多方法扩展，比如， 通过增加新的数据类型、函数、操作符、聚集函数、索引。免费使用、修改、和分发 PostgreSQL，不管是私用、商用、还是学术研究使用。</p>
<h2 id="PostgresSQL安装"><a href="#PostgresSQL安装" class="headerlink" title="PostgresSQL安装"></a>PostgresSQL安装</h2><ul>
<li><p>添加apt-repository</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository <span class="string">"deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main"</span></div></pre></td></tr></table></figure>
</li>
<li><p>载入apt-repository的签名</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</div></pre></td></tr></table></figure>
</li>
<li><p>更新package列表</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
</li>
<li><p>通过apt-get工具安装PostgreSQL</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install postgresql-9.6</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置PostgreSQL"><a href="#配置PostgreSQL" class="headerlink" title="配置PostgreSQL"></a>配置PostgreSQL</h2><ul>
<li><p>切换到postgres用户</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo su postgres</div></pre></td></tr></table></figure>
</li>
<li><p>登录到postgresql</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">psql postgres</div></pre></td></tr></table></figure>
<p>  如果看到如下页面则说明之前的努力没有白费，已经安装成功了。<br><br>  <img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/PostgreSQL%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="Putty截图"></p>
</li>
<li><p>更改用户密码<br>  在当前界面下输入</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\password</div></pre></td></tr></table></figure>
<p>  输入你想设置的PostgreSQL密码。输入\q回车退出。</p>
</li>
<li><p>设置连接权限</p>
<ul>
<li><p>打开配置文件</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/postgresql/9.1/main/postgresql.conf</div></pre></td></tr></table></figure>
</li>
<li><p>修改连接权限为所有主机</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#listen_addresses = ‘localhost’改为 listen_addresses = ‘*’</span></div></pre></td></tr></table></figure>
<p>  <code>注意：</code>需要去掉#号</p>
</li>
<li><p>启用密码验证</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#password_encryption = on 改为 password_encryption = on</span></div></pre></td></tr></table></figure>
<p>  <code>注意：</code>需要去掉#号</p>
</li>
</ul>
</li>
<li><p>设置用户ip段</p>
<ul>
<li><p>打开配置文件</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/postgresql/9.1/main/pg_hba.conf</div></pre></td></tr></table></figure>
</li>
<li><p>在文件末尾添加如下内容</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">host all all 0.0.0.0/0 md5</div></pre></td></tr></table></figure>
<p>  <code>注意：</code>0.0.0.0为地址段。0为掩码的二进制位，可取数值为0、8、16、24、32。md5为加密方式<br>  <code>示例：</code>192.168.0.0/16代表192.168.0.1 ~ 192.168.255.254</p>
</li>
</ul>
</li>
<li>重启PostgreSQL服务  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service postgres restart</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h2><ul>
<li><p>本地登录</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">psql -U postgres -h 127.0.0.1</div></pre></td></tr></table></figure>
</li>
<li><p>远程登录</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">psql -U postgres -h 远程IP地址</div></pre></td></tr></table></figure></li>
</ul>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Ubuntu 16.04系统下的PostgreSQL 9.6安装和配置的详细步骤 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;PostgreSQL 是一个自由的对象-关系数据库服务器(数据库管理系统)，它在 BSD-风格许可证下发行&lt;br&gt;
    
    </summary>
    
      <category term="software" scheme="https://cs-tao.github.io/categories/software/"/>
    
    
      <category term="PostgreSQL" scheme="https://cs-tao.github.io/tags/PostgreSQL/"/>
    
      <category term="Ubuntu" scheme="https://cs-tao.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>如何利用hexo发表文章</title>
    <link href="https://cs-tao.github.io/2017/08/24/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8hexo%E5%8F%91%E8%A1%A8%E6%96%87%E7%AB%A0/"/>
    <id>https://cs-tao.github.io/2017/08/24/如何利用hexo发表文章/</id>
    <published>2017-08-24T06:28:21.213Z</published>
    <updated>2017-08-24T07:52:32.537Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 如何利用hexo发表文章 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    本文修改自<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>自动创建的Hello-World.md，Hexo代码开源。详见<a href="https://github.com/hexojs/hexo/" target="_blank" rel="external">GitHub</a><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="新建文章并发表"><a href="#新建文章并发表" class="headerlink" title="新建文章并发表"></a>新建文章并发表</h2><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"新文章"</span></div></pre></td></tr></table></figure>
<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>详见：Hexo<a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">官方文档</a></p>
<h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>详见：Hexo<a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">官方文档</a></p>
<h2 id="启动hexo服务"><a href="#启动hexo服务" class="headerlink" title="启动hexo服务"></a>启动hexo服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>详见：Hexo<a href="https://hexo.io/docs/server.html" target="_blank" rel="external">官方文档</a></p>
<h2 id="部署到远程"><a href="#部署到远程" class="headerlink" title="部署到远程"></a>部署到远程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>Hexo<a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">官方文档</a></p>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 如何利用hexo发表文章 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    本文修改自&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;自动创建的Hello-World.md，Hexo代码开源。详见&lt;a href=&quot;https://github.com/hexojs/hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="https://cs-tao.github.io/categories/web/"/>
    
    
      <category term="Hexo" scheme="https://cs-tao.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>GMap.net for WPF 使用心得</title>
    <link href="https://cs-tao.github.io/2017/08/19/GMap.net-for-WPF-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>https://cs-tao.github.io/2017/08/19/GMap.net-for-WPF-使用心得/</id>
    <published>2017-08-19T08:42:23.000Z</published>
    <updated>2017-09-03T14:48:49.912Z</updated>
    
    <content type="html"><![CDATA[<p><strong> GMap.net for WPF </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    利用GMap.net for WPF绘制点线面的方式以及未指定长宽的要素与其他要素间相对定位的方式<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="GMap-net概述"><a href="#GMap-net概述" class="headerlink" title="GMap.net概述"></a>GMap.net概述</h2><p><a href="https://greatmaps.codeplex.com/" title="进入GMap.NET的项目地址" target="_blank" rel="external">GMap.net</a>是一个强大、免费、跨平台、开源的.NET控件，它在WinForm和WPF环境中能够通过Google, Yahoo!, Bing, OpenStreetMap, ArcGIS, Pergo, SigPac等实现寻找路径、地理编码以及地图展示功能，并支持缓存和运行在Mobile环境中。<br>GMap.NET是一个开源的GEO地图定位和跟踪程序。就像谷歌地图、雅虎地图一样，可以自动计算两地的距离，定位经纬度，与Google地图不同的是，该项目是建立在WinForm框架或WPF框架基础上的。可以对地图放大缩小，进行城市标记等。<br>  <br></p>
<h2 id="GMap-net-for-WPF-绘制要素"><a href="#GMap-net-for-WPF-绘制要素" class="headerlink" title="GMap.net for WPF 绘制要素"></a>GMap.net for WPF 绘制要素</h2><p>因为现在正在利用GMap.net for WPF写一个项目，所以我对WPF版本更加熟悉，如有错误或不当之处，还望指出，共同进步！</p>
<ul>
<li><p>不同于Winform版本，WPF版本没有图层的概念，但用于显示要素的对象GMapMarker提供了Zindex属性，该属性值大的会遮盖属性值小的。所以大家可以利用Zindex对地理要素建立逻辑上的图层关联。</p>
</li>
<li><p>WinForm版本绘图可以直接在显示对象上设置图形的属性，如：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GMapPolygon polygon = new GMapPolygon(pointList, &quot;Polygon&quot;);</div><div class="line">&#123;</div><div class="line">    polygon.IsHitTestVisible = true;</div><div class="line">    polygon.Fill = new SolidBrush(Color.FromArgb(50, Color.Red));</div><div class="line">    polygon.Stroke = new Pen(Color.Blue, 2);</div><div class="line">&#125;</div><div class="line">overlay.Polygons.Add(polygon);</div></pre></td></tr></table></figure>
<p>  对于wpf版本的点对象，可以直接指定显示用户控件，如：<br></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GMapMarker marker = new GMapMarker(pointLatLng);</div><div class="line">&#123;</div><div class="line">    MyUserControl myUserControl = new MyUserControl()</div><div class="line">    marker.Shape = myUserControl;</div><div class="line">    marker.ZIndex = (int)LayerIndex.Point;</div><div class="line">    marker.Offset = new Point(-myUserControl.ActualWidth / 2, -myUserControl.ActualHeight / 2);</div><div class="line">&#125;</div><div class="line">mapControl.Markers.Add(marker);</div></pre></td></tr></table></figure>
<p>  其中MyUserControl可以重载自UserControl，并自定义显示内容。LayerIndex为自定义的枚举类型。mapControl重载自GMapControl。<br>  但是wpf版本的线的属性设置需要重载GMapControl的CreateRoutePath方法，面的属性设置需要重载CreatePolygonPath方法。为了不影响原函数的内容，我们可以参考GMapControl的源代码<a href="https://greatmaps.codeplex.com/SourceControl/latest#GMap.NET.WindowsPresentation/GMap.NET.WindowsPresentation/GMapControl.cs" title="查看源码文件" target="_blank" rel="external"><em>GMapControl.cs</em></a>文件。重载CreateRoutePath方法和CreatePolygonPath后的内容如下，只做了少量修改：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">/// &lt;summary&gt;</div><div class="line">/// creates path from list of points, for performance set addBlurEffect to false</div><div class="line">/// &lt;/summary&gt;</div><div class="line">/// &lt;param name=&quot;pl&quot;&gt;&lt;/param&gt;</div><div class="line">/// &lt;returns&gt;&lt;/returns&gt;</div><div class="line">public override Path CreateRoutePath(List&lt;Point&gt; localPath, bool addBlurEffect)</div><div class="line">&#123;</div><div class="line">    // Create a StreamGeometry to use to specify myPath.</div><div class="line">    StreamGeometry geometry = new StreamGeometry();</div><div class="line">    </div><div class="line">    using (StreamGeometryContext ctx = geometry.Open())</div><div class="line">    &#123;</div><div class="line">        ctx.BeginFigure(localPath[0], false, false);</div><div class="line">        </div><div class="line">        // Draw a line to the next specified point.</div><div class="line">        ctx.PolyLineTo(localPath, true, true);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // Freeze the geometry (make it unmodifiable)</div><div class="line">    // for additional performance benefits.</div><div class="line">    geometry.Freeze();</div><div class="line">    </div><div class="line">    // Create a path to draw a geometry with.</div><div class="line">    Path myPath = new Path();</div><div class="line">    &#123;</div><div class="line">        // Specify the shape of the Path using the StreamGeometry.</div><div class="line">        myPath.Data = geometry;</div><div class="line">        </div><div class="line">        if (addBlurEffect)</div><div class="line">        &#123;</div><div class="line">            BlurEffect ef = new BlurEffect();</div><div class="line">            &#123;</div><div class="line">                ef.KernelType = KernelType.Gaussian;</div><div class="line">                ef.Radius = 0.0;</div><div class="line">                ef.RenderingBias = RenderingBias.Performance;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            myPath.Effect = ef;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        myPath.Stroke = lineBrush;</div><div class="line">        myPath.StrokeThickness = lineWidth;</div><div class="line">        myPath.StrokeLineJoin = PenLineJoin.Round;</div><div class="line">        myPath.StrokeStartLineCap = PenLineCap.Triangle;</div><div class="line">        myPath.StrokeEndLineCap = PenLineCap.Round;</div><div class="line">        </div><div class="line">        myPath.Opacity = lineOpacity;</div><div class="line">        myPath.IsHitTestVisible = false;</div><div class="line">    &#125;</div><div class="line">    return myPath;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <code>注意:</code>代码中lineBrush、lineWidth、lineOpacity为重载GMapControl时新添的公共字段。</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">/// &lt;summary&gt;</div><div class="line">/// creates path from list of points, for performance set addBlurEffect to false</div><div class="line">/// &lt;/summary&gt;</div><div class="line">/// &lt;param name=&quot;pl&quot;&gt;&lt;/param&gt;</div><div class="line">/// &lt;returns&gt;&lt;/returns&gt;</div><div class="line">public override Path CreatePolygonPath(List&lt;Point&gt; localPath, bool addBlurEffect)</div><div class="line">&#123;</div><div class="line">    // Create a StreamGeometry to use to specify myPath.</div><div class="line">    StreamGeometry geometry = new StreamGeometry();</div><div class="line"></div><div class="line">    using (StreamGeometryContext ctx = geometry.Open())</div><div class="line">    &#123;</div><div class="line">        ctx.BeginFigure(localPath[0], true, true);</div><div class="line"></div><div class="line">        // Draw a line to the next specified point.</div><div class="line">        ctx.PolyLineTo(localPath, true, true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Freeze the geometry (make it unmodifiable)</div><div class="line">    // for additional performance benefits.</div><div class="line">    geometry.Freeze();</div><div class="line"></div><div class="line">    // Create a path to draw a geometry with.</div><div class="line">    Path myPath = new Path();</div><div class="line">    &#123;</div><div class="line">        // Specify the shape of the Path using the StreamGeometry.</div><div class="line">        myPath.Data = geometry;</div><div class="line"></div><div class="line">        if (addBlurEffect)</div><div class="line">        &#123;</div><div class="line">            BlurEffect ef = new BlurEffect();</div><div class="line">            &#123;</div><div class="line">                ef.KernelType = KernelType.Gaussian;</div><div class="line">                ef.Radius = 0.0;</div><div class="line">                ef.RenderingBias = RenderingBias.Performance;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            myPath.Effect = ef;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        myPath.Stroke = polygonStrokeBrush;</div><div class="line">        myPath.StrokeThickness = polygonThickness;</div><div class="line">        myPath.StrokeLineJoin = PenLineJoin.Miter;</div><div class="line">        myPath.StrokeStartLineCap = PenLineCap.Triangle;</div><div class="line">        myPath.StrokeEndLineCap = PenLineCap.Square;</div><div class="line"></div><div class="line">        myPath.Fill = polygonFillBush;</div><div class="line"></div><div class="line">        myPath.Opacity = polygonOpacity;</div><div class="line">        myPath.IsHitTestVisible = false;</div><div class="line">    &#125;</div><div class="line">    return myPath;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <code>注意:</code>代码中polygonStrokeBrush、polygonThickness、polygonFillBush、polygonOpacity为重载GMapControl时新添的公共字段。</p>
</li>
<li><p>wpf版本只能绘制Point、PolyLine、Polygon三种图形，绘制圆则需要借助多边形的绘制。示例如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public void DrawCircle(PointLatLng center, double R)</div><div class="line">&#123;</div><div class="line">    double cartesianCenterX = double.MaxValue;</div><div class="line">    double cartesianCenterY = double.MaxValue;</div><div class="line">    double cartesianCenterZ = double.MaxValue;</div><div class="line"></div><div class="line">    mapControl.MapProvider.Projection.FromGeodeticToCartesian(center.Lat, center.Lng, 0, out cartesianCenterX, out cartesianCenterY, out cartesianCenterZ);//将圆心投影到笛卡尔坐标系</div><div class="line"></div><div class="line">    int pointCount = 200;//用于拟合圆的多边形顶点个数</div><div class="line"></div><div class="line">    List&lt;PointLatLng&gt; polygonPointList = new List&lt;PointLatLng&gt;(pointCount);//用于存放多边形顶点</div><div class="line"></div><div class="line">    double interval = 2 * Math.PI / pointCount;</div><div class="line">    for (double degree = 0; degree &lt; 2 * Math.PI; degree += interval)</div><div class="line">    &#123;</div><div class="line">        double tempX = cartesianCenterX + R * Math.Cos(degree);</div><div class="line">        double tempY = cartesianCenterY + R * Math.Sin(degree);</div><div class="line">        double tempLng = double.MaxValue;</div><div class="line">        double tempLat = double.MaxValue;</div><div class="line">        mapControl.MapProvider.Projection.FromCartesianTGeodetic(tempX, tempY, cartesianCenterZ, out tempLat, out tempLng);//投影到WGS84坐标系</div><div class="line">        polygonPointList.Add(new PointLatLng(tempLat, tempLng));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    GMapPolygon circle = new GMapPolygon(polygonPointList);</div><div class="line">    &#123;</div><div class="line">        circle.ZIndex = (int)LayerIndex.Polygon;</div><div class="line">    &#125;</div><div class="line">    mapControl.Markers.Add(circle);//添加到地图</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  效果如下：<br>  <img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/GMap-Wpf-Draw-Circle.png" alt="软件截屏"><br><br>  因为投影问题，说好的圆变为了椭圆，如果想生成正圆，可以在程序中使用一些WebAPI服务替换GMap的投影服务，我们项目使用的是搭建在自己服务器上的的GeoServer服务。效果如下：<br>  <img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/FGIS-Damage-Circle.png" alt="软件截屏"><br><br>  <code>备注：</code>两张图片截图自不同的程序。<br><br></p>
<h2 id="未指定长宽的要素与其他要素间相对定位的方式"><a href="#未指定长宽的要素与其他要素间相对定位的方式" class="headerlink" title="未指定长宽的要素与其他要素间相对定位的方式"></a>未指定长宽的要素与其他要素间相对定位的方式</h2><p>在使用GMap添加要素的时候，遇到需要对要素添加Tooltip，但不能指定Tooltip的长宽，且该要素与Tooltip需要水平中心对其，试过很多办法都不能成功，因为wpf控件的ActualWidth和ActualHeight属性必须加载过一次才能有正确的属性值，也就是说如果根据长宽计算GMapMarker的偏移量，Tolltip在第一次显示的时候无法正确定位，经过探索，最终利用wpf控件的SizeChanged响应函数实现了该效果，如果您有其他方法实现，希望能在评论中指出。效果如下：<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/GMap-Tooltip.png" alt="软件截屏"><br></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public void AddIconWithTooltip(PointLatLng pll, Uri iconUri, string tooltip)</div><div class="line">&#123;</div><div class="line">    Guid id = Guid.NewGuid();</div><div class="line">    </div><div class="line">    //添加tooltip显示窗口</div><div class="line">    GMapMarker tooltipViewer = new GMapMarker(pll);</div><div class="line">    &#123;</div><div class="line">        tooltipViewer.ZIndex = (int)LayerIndex.Point;</div><div class="line">        tooltipViewer.Tag = id;</div><div class="line">        TooltipForMap content = new TooltipForMap(tooltip, tooltipViewer);</div><div class="line">        tooltipViewer.Shape = content;</div><div class="line">        tooltipViewer.Shape.Visibility = Visibility.Hidden;</div><div class="line">    &#125;</div><div class="line">    mapControl.Markers.Add(tooltipViewer);</div><div class="line">    </div><div class="line">    UIElement shape = new MyIcon(new BitmapImage(iconUri), tooltipViewer);//构造函数：MyIcon(ImageSource image, GMapMarker iconTooltipViewer, double width = 22, double height = 22, bool showTipAlways = false)</div><div class="line">    </div><div class="line">    GMapMarker iconMarker = new GMapMarker(pll);</div><div class="line">    &#123;</div><div class="line">        iconMarker.ZIndex = (int)layerIndex;</div><div class="line">        iconMarker.Offset = new Point(-11, -11);</div><div class="line">        iconMarker.Tag = id;</div><div class="line">        iconMarker.Shape = shape;</div><div class="line">    &#125;</div><div class="line">    mapControl.Markers.Add(iconMarker);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>注意：</code>代码中id的作用是用于GMapMarker间的逻辑关联，方便同时从MapControl中移除。<br><br>关键代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TooltipForMap content = new TooltipForMap(tooltip, tooltipViewer);</div></pre></td></tr></table></figure></p>
<p>其中TooltipForMap类的SizeChanged函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private void TooltipForMap_SizeChanged(object sender, SizeChangedEventArgs e)</div><div class="line">&#123;</div><div class="line">    _TooltipViewer.Offset = new Point(-ActualWidth / 2, -ActualHeight - 22);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>注意：</code>_TooltipViewer和传入构造函数的tooltipViewer为同一实例。<br><em>持续更新中…</em></p>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; GMap.net for WPF &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    利用GMap.net for WPF绘制点线面的方式以及未指定长宽的要素与其他要素间相对定位的方式&lt;br&gt;
    
    </summary>
    
      <category term="software" scheme="https://cs-tao.github.io/categories/software/"/>
    
    
      <category term="C#" scheme="https://cs-tao.github.io/tags/C/"/>
    
      <category term="Project" scheme="https://cs-tao.github.io/tags/Project/"/>
    
      <category term="Wpf" scheme="https://cs-tao.github.io/tags/Wpf/"/>
    
      <category term="GMap.net" scheme="https://cs-tao.github.io/tags/GMap-net/"/>
    
  </entry>
  
  <entry>
    <title>Android学习心得</title>
    <link href="https://cs-tao.github.io/2017/08/19/Android%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <id>https://cs-tao.github.io/2017/08/19/Android学习心得/</id>
    <published>2017-08-18T16:42:08.000Z</published>
    <updated>2017-08-24T18:31:47.267Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 参加四维图新地图制图大赛，写了个Android App，现在把学到的知识记录一下 </strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 参加四维图新地图制图大赛，写了个Android App，现在把学到的知识记录一下 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="language" scheme="https://cs-tao.github.io/categories/language/"/>
    
    
      <category term="Android" scheme="https://cs-tao.github.io/tags/Android/"/>
    
      <category term="Java" scheme="https://cs-tao.github.io/tags/Java/"/>
    
      <category term="AndroidStudio" scheme="https://cs-tao.github.io/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>GIS-for-Web应用开发之道-学习心得</title>
    <link href="https://cs-tao.github.io/2017/08/19/GIS-for-Web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E9%81%93-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <id>https://cs-tao.github.io/2017/08/19/GIS-for-Web应用开发之道-学习心得/</id>
    <published>2017-08-18T16:41:35.000Z</published>
    <updated>2017-08-21T19:27:57.338Z</updated>
    
    <content type="html"><![CDATA[<p><strong> GIS-for-Web应用开发之道 读书心得 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    在此感谢<a href="http://urbancolab.org/" title="Chaogui Kang" target="_blank" rel="external">康老师</a>的指导<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; GIS-for-Web应用开发之道 读书心得 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    在此感谢&lt;a href=&quot;http://urbancolab.org/&quot; title=&quot;Chaogui Kang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;康老师&lt;/a&gt;的指导&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="https://cs-tao.github.io/categories/web/"/>
    
    
      <category term="GIS" scheme="https://cs-tao.github.io/tags/GIS/"/>
    
  </entry>
  
  <entry>
    <title>git学习心得</title>
    <link href="https://cs-tao.github.io/2017/08/19/git%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <id>https://cs-tao.github.io/2017/08/19/git学习心得/</id>
    <published>2017-08-18T16:39:49.000Z</published>
    <updated>2017-08-24T18:32:33.446Z</updated>
    
    <content type="html"><![CDATA[<p><strong> git命令行学习小记 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    利用git命令行托管代码到github。搭建自己的git服务<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; git命令行学习小记 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    利用git命令行托管代码到github。搭建自己的git服务&lt;br&gt;
    
    </summary>
    
      <category term="software" scheme="https://cs-tao.github.io/categories/software/"/>
    
    
      <category term="Git" scheme="https://cs-tao.github.io/tags/Git/"/>
    
      <category term="Github" scheme="https://cs-tao.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>在VS中使用Github</title>
    <link href="https://cs-tao.github.io/2017/08/19/%E5%9C%A8VS%E4%B8%AD%E4%BD%BF%E7%94%A8Github/"/>
    <id>https://cs-tao.github.io/2017/08/19/在VS中使用Github/</id>
    <published>2017-08-18T16:39:34.000Z</published>
    <updated>2017-08-20T02:42:43.983Z</updated>
    
    <content type="html"><![CDATA[<p><strong> vs中使用GitHub的方法 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    将VS工程代码提交到github或自己的git服务<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; vs中使用GitHub的方法 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    将VS工程代码提交到github或自己的git服务&lt;br&gt;
    
    </summary>
    
      <category term="software" scheme="https://cs-tao.github.io/categories/software/"/>
    
    
      <category term="Git" scheme="https://cs-tao.github.io/tags/Git/"/>
    
      <category term="Github" scheme="https://cs-tao.github.io/tags/Github/"/>
    
      <category term="VS" scheme="https://cs-tao.github.io/tags/VS/"/>
    
  </entry>
  
  <entry>
    <title>团队项目中Github的使用</title>
    <link href="https://cs-tao.github.io/2017/08/19/%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E4%B8%ADGithub%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://cs-tao.github.io/2017/08/19/团队项目中Github的使用/</id>
    <published>2017-08-18T16:39:07.000Z</published>
    <updated>2017-09-26T12:41:18.584Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 前几个月学习了Github的使用，希望我的经验能帮助到那些想要了解和学习Github的人 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    本文将讲解团队项目中Github的基本使用，笔者的操作系统为Win10<br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/" target="_blank" rel="external">Github</a>是一个面向开源及私有软件项目的托管平台，因为只支持git作为唯一的版本库格式进行托管，故名GitHub。<br>gitHub于2008年4月10日正式上线，除了git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。<a href="https://baike.baidu.com/item/github/10145341" target="_blank" rel="external">百度百科</a></p>
<h2 id="创建仓库并提交、推送文件到远程仓库"><a href="#创建仓库并提交、推送文件到远程仓库" class="headerlink" title="创建仓库并提交、推送文件到远程仓库"></a>创建仓库并提交、推送文件到远程仓库</h2><ul>
<li>在本地操作系统上安装<a href="https://git-scm.com/" target="_blank" rel="external">git</a>，这是<a href="https://git-scm.com/downloads" target="_blank" rel="external">下载页面</a>，对于git的安装和配置，在此不做介绍。</li>
<li>登录<a href="https://github.com/" target="_blank" rel="external">Github</a>并点击”New repository”按钮，新建远程仓库。<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/new.png" alt="新建远程仓库"></li>
<li>进入新建仓库页面，填写仓库信息，点击”Create repository”按钮，完成远程仓库的创建。<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/create.png" alt="新建远程仓库"></li>
<li>出现以下界面说明创建成功。<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/created.png" alt="新建远程仓库"><br><br><code>注意：</code>如果在上一个页面没有选择创建.gitignore、LICENSE、README.md等文件，可以之后添加。当前只有master分支（git的默认分支为master），您也可以点击上图中的”Branch:master”下拉按钮，新建分支。<br></li>
<li>在本地新建文件夹，用于存放仓库，文件夹必须为空。在文件夹中按住Shift点击鼠标右键，点击”在此处打开命令窗口”，或直接点击鼠标右键点击”Git Bash Here”（如果没有该选项，则需找到git bash所在位置，启动bash，并导航进入本文件夹）。</li>
<li><p>键入下面的命令初始化本地仓库。<br></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
</li>
<li><p>为本地仓库添加远程仓库。<br></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/CS-Tao/example.git</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>注意：</code>该命令的格式为 “git remote add 远程仓库的别名（方便记忆和键入） 远程仓库的url”。<br></p>
<ul>
<li>拉取远程仓库并合并到本地仓库。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>注意：</code>该命令的格式为 “git pull 远程仓库的别名（或url） 希望拉取的分支”。该命令会自动在本地仓库中创建master分支，另外，”git pull”命令相当于”git fetch”命令和”git merge”命令的集成，在此不再详述。<br></p>
<ul>
<li>这三个命令的效果如下。<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/first_pull.png" alt="建立本地仓库"><br></li>
<li>假如您现在在本项目文件夹中新建了”NewFolder”文件夹，并在文件夹中添加了source.cpp文件，您可以依次执行以下命令将新建的文件提交到远程仓库。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add NewFolder/source.cpp</div><div class="line">git commit -m <span class="string">"Add source.cpp"</span></div><div class="line">git push origin master</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>注意：</code></p>
<pre><code>1. 无论是新建文件，还是对文件做了修改，都可以键入类似的命令提交并推送文件。
2. 向库中添加文件的命令格式为，&quot;git add 文件或文件夹&quot;，不同文件或文件夹用空格隔开，添加文件夹时会把文件夹内部的所有文件一并添加。
3. 在执行&quot;git commit -m &quot;这次提交做了什么&quot;&quot;时，git会自动检测文件是否为新建文件或是否做了修改，并将新建或修改的文件或文件夹提交到本地仓库。
4. &quot;git push 远程仓库的别名（或url） 希望推送到的分支&quot;命令会将本地的提交推送到远程仓库。&lt;br&gt;
</code></pre><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/first_push.png" alt="推送到远程"><br></p>
<ul>
<li>到此为止，本地仓库和远程仓库的视图如下。<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/folder.png" alt="本地仓库"><br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/github_addFile.png" alt="远程仓库"></li>
</ul>
<h2 id="新建本地分支并推送到远程"><a href="#新建本地分支并推送到远程" class="headerlink" title="新建本地分支并推送到远程"></a>新建本地分支并推送到远程</h2><p>敬请期待</p>
<h2 id="fork团队组长的仓库并合并不同成员的提交"><a href="#fork团队组长的仓库并合并不同成员的提交" class="headerlink" title="fork团队组长的仓库并合并不同成员的提交"></a>fork团队组长的仓库并合并不同成员的提交</h2><p>敬请期待</p>
<h2 id="合并冲突的方法"><a href="#合并冲突的方法" class="headerlink" title="合并冲突的方法"></a>合并冲突的方法</h2><p>敬请期待</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 前几个月学习了Github的使用，希望我的经验能帮助到那些想要了解和学习Github的人 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    本文将讲解团队项目中Github的基本使用，笔者的操作系统为Win10&lt;br&gt;
    
    </summary>
    
      <category term="software" scheme="https://cs-tao.github.io/categories/software/"/>
    
    
      <category term="Project" scheme="https://cs-tao.github.io/tags/Project/"/>
    
      <category term="Git" scheme="https://cs-tao.github.io/tags/Git/"/>
    
      <category term="Github" scheme="https://cs-tao.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>C#中await和async</title>
    <link href="https://cs-tao.github.io/2017/08/19/C-%E4%B8%ADawait%E5%92%8Casync/"/>
    <id>https://cs-tao.github.io/2017/08/19/C-中await和async/</id>
    <published>2017-08-18T16:38:21.000Z</published>
    <updated>2017-10-18T14:09:55.866Z</updated>
    
    <content type="html"><![CDATA[<p><strong> C#中await和async使用介绍 </strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; C#中await和async使用介绍 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="language" scheme="https://cs-tao.github.io/categories/language/"/>
    
    
      <category term="C#" scheme="https://cs-tao.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Wpf使用MahApp.Metro主题</title>
    <link href="https://cs-tao.github.io/2017/08/19/Wpf%E4%BD%BF%E7%94%A8MahApp-Metro%E4%B8%BB%E9%A2%98/"/>
    <id>https://cs-tao.github.io/2017/08/19/Wpf使用MahApp-Metro主题/</id>
    <published>2017-08-18T16:21:28.000Z</published>
    <updated>2017-08-19T08:57:45.373Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Wpf使用MahApp.Metro主题的步骤小记 </strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文=""></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Wpf使用MahApp.Metro主题的步骤小记 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="language" scheme="https://cs-tao.github.io/categories/language/"/>
    
    
      <category term="C#" scheme="https://cs-tao.github.io/tags/C/"/>
    
      <category term="Wpf" scheme="https://cs-tao.github.io/tags/Wpf/"/>
    
      <category term="Xaml" scheme="https://cs-tao.github.io/tags/Xaml/"/>
    
  </entry>
  
  <entry>
    <title>2017年暑假旅游笔记</title>
    <link href="https://cs-tao.github.io/2017/08/17/%E6%9A%91%E5%81%87%E6%97%85%E6%B8%B8%E7%AC%94%E8%AE%B0/"/>
    <id>https://cs-tao.github.io/2017/08/17/暑假旅游笔记/</id>
    <published>2017-08-16T18:45:12.000Z</published>
    <updated>2017-08-20T09:08:47.882Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 暑假旅行笔记 </strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h2 id="起点：彭水"><a href="#起点：彭水" class="headerlink" title="起点：彭水"></a>起点：彭水</h2><p>持续更新…</p>
<h2 id="第一站：涪陵"><a href="#第一站：涪陵" class="headerlink" title="第一站：涪陵"></a>第一站：涪陵</h2><p>持续更新…</p>
<h2 id="第二站：重庆"><a href="#第二站：重庆" class="headerlink" title="第二站：重庆"></a>第二站：重庆</h2><p>持续更新…</p>
<h2 id="第三站：成都"><a href="#第三站：成都" class="headerlink" title="第三站：成都"></a>第三站：成都</h2><p>持续更新…</p>
<h2 id="第四站：重庆"><a href="#第四站：重庆" class="headerlink" title="第四站：重庆"></a>第四站：重庆</h2><p>持续更新…</p>
<h2 id="终点：彭水"><a href="#终点：彭水" class="headerlink" title="终点：彭水"></a>终点：彭水</h2><p>持续更新…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 暑假旅行笔记 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Life" scheme="https://cs-tao.github.io/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>ISODATA算法学习心得及非监督分类软件得商业化界面实现</title>
    <link href="https://cs-tao.github.io/2017/08/17/ISODATA%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%E5%8F%8A%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%88%86%E7%B1%BB%E8%BD%AF%E4%BB%B6%E5%BE%97%E5%95%86%E4%B8%9A%E5%8C%96%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0/"/>
    <id>https://cs-tao.github.io/2017/08/17/ISODATA算法学习心得及非监督分类软件得商业化界面实现/</id>
    <published>2017-08-16T18:25:00.000Z</published>
    <updated>2017-08-19T08:57:45.358Z</updated>
    
    <content type="html"><![CDATA[<p><strong> ISODATA和Winform </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    <a href="http://www.scholat.com/jianyao" title="Jian Yao" target="_blank" rel="external">姚剑老师</a>模式识别作业，代码已托管至<a href="https://github.com/CS-Tao/ImageFactory" title="ImageFactory" target="_blank" rel="external">Github</a><br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="ISODATA算法介绍"><a href="#ISODATA算法介绍" class="headerlink" title="ISODATA算法介绍"></a>ISODATA算法介绍</h3><p>ISODATA(Iterative Selforganizing Data Analysis Techniques Algorithm)算法，即迭代自组织数据分析算法。该算法是在k-均值算法的基础上，增加对聚类结果的“合并”和“分裂”两个操作，并设定算法运行控制参数的一种聚类算法。迭代次数会影响最终结果，迭代参数选择很重要。待续…</p>
<h3 id="商业化界面的实现"><a href="#商业化界面的实现" class="headerlink" title="商业化界面的实现"></a>商业化界面的实现</h3><p>采用Winform实现。待续…</p>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; ISODATA和Winform &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    &lt;a href=&quot;http://www.scholat.com/jianyao&quot; title=&quot;Jian Yao&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;姚剑老师&lt;/a&gt;模式识别作业，代码已托管至&lt;a href=&quot;https://github.com/CS-Tao/ImageFactory&quot; title=&quot;ImageFactory&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="software" scheme="https://cs-tao.github.io/categories/software/"/>
    
    
      <category term="C#" scheme="https://cs-tao.github.io/tags/C/"/>
    
      <category term="WinForm" scheme="https://cs-tao.github.io/tags/WinForm/"/>
    
      <category term="ISODATA" scheme="https://cs-tao.github.io/tags/ISODATA/"/>
    
  </entry>
  
</feed>
